# This file is automatically generated, do not edit manually!
# To regenerate it, run 'pnpm run build:workflow'

name: CI
on:
  - push
  - pull_request
env:
  PRIMARY_NODE_VERSION: 18
jobs:
  install:
    name: Checkout and install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
  build-docs:
    name: Build docs
    runs-on: ubuntu-latest
    needs:
      - install
      - build-vality
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: ../docs
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Download Vality build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-vality
          path: ./packages/vality
      - name: Restore webpack cache
        uses: actions/cache@v3
        with:
          path: docs/node_modules/.cache/webpack
          key: docs-webpack-cache
          restore-keys: docs-webpack-cache
      - name: Build docs
        run: pnpm --filter docs run build
      - name: Cache webpack build
        uses: actions/cache@v3
        with:
          path: docs/node_modules/.cache/webpack
          key: docs-webpack-cache
      - name: Upload docs artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs/build
  deploy-docs:
    name: Deploy docs
    runs-on: ubuntu-latest
    needs:
      - build-docs
    permissions:
      pages: write
      id-token: write
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    environment:
      name: Docs
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: deploy-docs
      cancel-in-progress: true
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v1
  lint-eslint-plugin-vality:
    name: "Lint: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: eslint-plugin-vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Lint
        run: pnpm --filter eslint-plugin-vality run lint
  unit-test-eslint-plugin-vality:
    name: "Unit Test: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - install
    strategy:
      matrix:
        node-version:
          - 14
          - 16
          - 18
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: eslint-plugin-vality
          node-version: ${{ matrix.node-version }}
      - name: Test
        if: ${{ matrix.node-version != env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter eslint-plugin-vality run test:unit
      - name: Test (coverage)
        if: ${{ matrix.node-version == env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter eslint-plugin-vality run test:coverage
      - name: Upload coverage artifact
        if: ${{ matrix.node-version == env.PRIMARY_NODE_VERSION }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-eslint-plugin-vality
          path: ./packages/eslint-plugin-vality/coverage
  type-test-eslint-plugin-vality:
    name: "Type Test: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: eslint-plugin-vality
          node-version: ${{ matrix.node-version }}
      - name: Test
        if: ${{ matrix.node-version != env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter eslint-plugin-vality run test:type
  typecheck-eslint-plugin-vality:
    name: "Typecheck: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: eslint-plugin-vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Typecheck
        run: pnpm --filter eslint-plugin-vality run typecheck
  check-version-eslint-plugin-vality:
    name: "Check version: eslint-plugin-vality"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    outputs:
      should-publish: ${{ steps.check.outputs.changed }}
      current-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check for version changes
        id: check
        uses: EndBug/version-check@v2
        with:
          file-name: ./packages/eslint-plugin-vality/package.json
          file-url: https://unpkg.com/eslint-plugin-vality/package.json
          static-checking: localIsNew
  build-eslint-plugin-vality:
    name: "Build: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - lint-eslint-plugin-vality
      - unit-test-eslint-plugin-vality
      - type-test-eslint-plugin-vality
      - typecheck-eslint-plugin-vality
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: eslint-plugin-vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Build
        run: pnpm --filter eslint-plugin-vality run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-eslint-plugin-vality
          path: |-
            ./packages/eslint-plugin-vality/dist
            ./packages/eslint-plugin-vality/src
            ./packages/eslint-plugin-vality/package.json
            ./packages/eslint-plugin-vality/README.md
            ./packages/eslint-plugin-vality/LICENSE.json
  coverage-eslint-plugin-vality:
    name: "Upload coverage: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - unit-test-eslint-plugin-vality
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-eslint-plugin-vality
          path: ./packages/eslint-plugin-vality/coverage
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/eslint-plugin-vality/coverage/lcov.info
          flags: eslint-plugin-vality
  publish-eslint-plugin-vality:
    name: "Publish: eslint-plugin-vality"
    runs-on: ubuntu-latest
    needs:
      - build-eslint-plugin-vality
      - check-version-eslint-plugin-vality
    if: ${{ needs.check-version-eslint-plugin-vality.outputs.should-publish ==
      'true' }}
    environment:
      name: "npm: eslint-plugin-vality"
      url: https://www.npmjs.com/package/eslint-plugin-vality
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-eslint-plugin-vality
          path: ./packages/eslint-plugin-vality
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: https://registry.npmjs.org
      - name: Publish to NPM
        working-directory: ./packages/eslint-plugin-vality
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  lint-vality:
    name: "Lint: vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Lint
        run: pnpm --filter vality run lint
  unit-test-vality:
    name: "Unit Test: vality"
    runs-on: ubuntu-latest
    needs:
      - install
    strategy:
      matrix:
        node-version:
          - 14
          - 16
          - 18
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: vality
          node-version: ${{ matrix.node-version }}
      - name: Test
        if: ${{ matrix.node-version != env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter vality run test:unit
      - name: Test (coverage)
        if: ${{ matrix.node-version == env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter vality run test:coverage
      - name: Upload coverage artifact
        if: ${{ matrix.node-version == env.PRIMARY_NODE_VERSION }}
        uses: actions/upload-artifact@v2
        with:
          name: coverage-vality
          path: ./packages/vality/coverage
  type-test-vality:
    name: "Type Test: vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: vality
          node-version: ${{ matrix.node-version }}
      - name: Test
        if: ${{ matrix.node-version != env.PRIMARY_NODE_VERSION }}
        run: pnpm --filter vality run test:type
  typecheck-vality:
    name: "Typecheck: vality"
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Typecheck
        run: pnpm --filter vality run typecheck
  check-version-vality:
    name: "Check version: vality"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    outputs:
      should-publish: ${{ steps.check.outputs.changed }}
      current-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check for version changes
        id: check
        uses: EndBug/version-check@v2
        with:
          file-name: ./packages/vality/package.json
          file-url: https://unpkg.com/vality/package.json
          static-checking: localIsNew
  build-vality:
    name: "Build: vality"
    runs-on: ubuntu-latest
    needs:
      - lint-vality
      - unit-test-vality
      - type-test-vality
      - typecheck-vality
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/setup
        with:
          package: vality
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Build
        run: pnpm --filter vality run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-vality
          path: |-
            ./packages/vality/dist
            ./packages/vality/src
            ./packages/vality/package.json
            ./packages/vality/README.md
            ./packages/vality/LICENSE.json
  coverage-vality:
    name: "Upload coverage: vality"
    runs-on: ubuntu-latest
    needs:
      - unit-test-vality
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download coverage artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-vality
          path: ./packages/vality/coverage
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/vality/coverage/lcov.info
          flags: vality
  publish-vality:
    name: "Publish: vality"
    runs-on: ubuntu-latest
    needs:
      - build-vality
      - check-version-vality
    if: ${{ needs.check-version-vality.outputs.should-publish == 'true' }}
    environment:
      name: "npm: vality"
      url: https://www.npmjs.com/package/vality
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-vality
          path: ./packages/vality
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
          registry-url: https://registry.npmjs.org
      - name: Publish to NPM
        working-directory: ./packages/vality
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
